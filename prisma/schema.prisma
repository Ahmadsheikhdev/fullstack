// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    ContactStatus @default(PENDING)
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique // Clerk user ID
  email     String?  // Optional since Clerk handles auth
  name      String?
  image     String?
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  courses   Course[] @relation("CourseInstructor")
  enrollments Enrollment[]
  reviews   Review[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  image       String?
  category    String
  level       CourseLevel
  duration    String
  instructorId String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  instructor User         @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments Enrollment[]
  reviews    Review[]
  lessons    Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  content   String
  videoUrl  String?
  duration  Int      // in minutes
  courseId  String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  enrolledAt DateTime @default(now())
  completed  Boolean  @default(false)
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
}

enum ContactStatus {
  PENDING
  RESPONDED
  RESOLVED
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
